/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IReservePool {
  export type UnderwriterInfoStruct = {
    stakeAmount: BigNumberish;
    utilizationCap: BigNumberish;
    currentUtilization: BigNumberish;
    active: boolean;
    rewardAccumulated: BigNumberish;
  };

  export type UnderwriterInfoStructOutput = [
    stakeAmount: bigint,
    utilizationCap: bigint,
    currentUtilization: bigint,
    active: boolean,
    rewardAccumulated: bigint
  ] & {
    stakeAmount: bigint;
    utilizationCap: bigint;
    currentUtilization: bigint;
    active: boolean;
    rewardAccumulated: bigint;
  };
}

export interface IReservePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStake"
      | "getUnderwriterInfo"
      | "getUnderwritingCapacity"
      | "grantCreditLine"
      | "payClaim"
      | "removeStake"
      | "repayFromUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStake",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderwriterInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderwritingCapacity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCreditLine",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payClaim",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromUser",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderwriterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderwritingCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromUser",
    data: BytesLike
  ): Result;
}

export interface IReservePool extends BaseContract {
  connect(runner?: ContractRunner | null): IReservePool;
  waitForDeployment(): Promise<this>;

  interface: IReservePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStake: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, utilizationCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  getUnderwriterInfo: TypedContractMethod<
    [token: AddressLike, underwriter: AddressLike],
    [IReservePool.UnderwriterInfoStructOutput],
    "view"
  >;

  getUnderwritingCapacity: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  grantCreditLine: TypedContractMethod<
    [user: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  payClaim: TypedContractMethod<
    [
      subscription: AddressLike,
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      claimProof: BytesLike,
      platformSig: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  removeStake: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayFromUser: TypedContractMethod<
    [
      user: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStake"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, utilizationCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUnderwriterInfo"
  ): TypedContractMethod<
    [token: AddressLike, underwriter: AddressLike],
    [IReservePool.UnderwriterInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderwritingCapacity"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantCreditLine"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payClaim"
  ): TypedContractMethod<
    [
      subscription: AddressLike,
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      claimProof: BytesLike,
      platformSig: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStake"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayFromUser"
  ): TypedContractMethod<
    [
      user: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
