/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISubscriptionFactory {
  export type PaymentAgreementStruct = {
    agreementId: BytesLike;
    user: AddressLike;
    provider: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    period: BigNumberish;
    startDate: BigNumberish;
    gracePeriod: BigNumberish;
    maxCover: BigNumberish;
    nonce: BigNumberish;
  };

  export type PaymentAgreementStructOutput = [
    agreementId: string,
    user: string,
    provider: string,
    token: string,
    amount: bigint,
    period: bigint,
    startDate: bigint,
    gracePeriod: bigint,
    maxCover: bigint,
    nonce: bigint
  ] & {
    agreementId: string;
    user: string;
    provider: string;
    token: string;
    amount: bigint;
    period: bigint;
    startDate: bigint;
    gracePeriod: bigint;
    maxCover: bigint;
    nonce: bigint;
  };
}

export interface ISubscriptionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createSubscription"
      | "createUserAgent"
      | "getSubscription"
      | "getUserSubscriptions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [ISubscriptionFactory.PaymentAgreementStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptions",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptions",
    data: BytesLike
  ): Result;
}

export interface ISubscriptionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ISubscriptionFactory;
  waitForDeployment(): Promise<this>;

  interface: ISubscriptionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createSubscription: TypedContractMethod<
    [
      agreement: ISubscriptionFactory.PaymentAgreementStruct,
      providerSig: BytesLike,
      userSig: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createUserAgent: TypedContractMethod<
    [user: AddressLike],
    [string],
    "nonpayable"
  >;

  getSubscription: TypedContractMethod<
    [agreementId: BytesLike],
    [string],
    "view"
  >;

  getUserSubscriptions: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [
      agreement: ISubscriptionFactory.PaymentAgreementStruct,
      providerSig: BytesLike,
      userSig: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserAgent"
  ): TypedContractMethod<[user: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<[agreementId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserSubscriptions"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;

  filters: {};
}
