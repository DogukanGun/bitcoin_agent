/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IUserAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeAgent"
      | "executeAgentAction"
      | "isAuthorizedAgent"
      | "isValidSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeAgent",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgentAction",
    values: [BytesLike, BigNumberish, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgentAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
}

export interface IUserAgent extends BaseContract {
  connect(runner?: ContractRunner | null): IUserAgent;
  waitForDeployment(): Promise<this>;

  interface: IUserAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeAgent: TypedContractMethod<
    [agent: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  executeAgentAction: TypedContractMethod<
    [
      structHash: BytesLike,
      nonce: BigNumberish,
      signature: BytesLike,
      target: AddressLike,
      data: BytesLike
    ],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  isAuthorizedAgent: TypedContractMethod<
    [agent: AddressLike],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeAgent"
  ): TypedContractMethod<
    [agent: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeAgentAction"
  ): TypedContractMethod<
    [
      structHash: BytesLike,
      nonce: BigNumberish,
      signature: BytesLike,
      target: AddressLike,
      data: BytesLike
    ],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedAgent"
  ): TypedContractMethod<[agent: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  filters: {};
}
