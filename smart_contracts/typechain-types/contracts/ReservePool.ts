/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ReservePool {
  export type PoolInfoStruct = {
    totalStaked: BigNumberish;
    totalUtilized: BigNumberish;
    totalRewards: BigNumberish;
    utilizationRate: BigNumberish;
    maxUtilizationRate: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    totalStaked: bigint,
    totalUtilized: bigint,
    totalRewards: bigint,
    utilizationRate: bigint,
    maxUtilizationRate: bigint
  ] & {
    totalStaked: bigint;
    totalUtilized: bigint;
    totalRewards: bigint;
    utilizationRate: bigint;
    maxUtilizationRate: bigint;
  };
}

export declare namespace IReservePool {
  export type UnderwriterInfoStruct = {
    stakeAmount: BigNumberish;
    utilizationCap: BigNumberish;
    currentUtilization: BigNumberish;
    active: boolean;
    rewardAccumulated: BigNumberish;
  };

  export type UnderwriterInfoStructOutput = [
    stakeAmount: bigint,
    utilizationCap: bigint,
    currentUtilization: bigint,
    active: boolean,
    rewardAccumulated: bigint
  ] & {
    stakeAmount: bigint;
    utilizationCap: bigint;
    currentUtilization: bigint;
    active: boolean;
    rewardAccumulated: bigint;
  };
}

export interface ReservePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "MAX_UTILIZATION_RATE"
      | "addStake"
      | "authorizeSubscription"
      | "authorizedSubscriptions"
      | "claimRewards"
      | "emergencyPause"
      | "emergencyUnpause"
      | "emergencyWithdraw"
      | "getPoolInfo"
      | "getPoolStats"
      | "getUnderwriterInfo"
      | "getUnderwritingCapacity"
      | "getUserDebt"
      | "grantCreditLine"
      | "isSubscriptionAuthorized"
      | "owner"
      | "paused"
      | "payClaim"
      | "platformFee"
      | "platformSigner"
      | "pools"
      | "processedClaims"
      | "removeStake"
      | "renounceOwnership"
      | "repayFromUser"
      | "setPlatformSigner"
      | "setPoolMaxUtilizationRate"
      | "setSubscriptionFactory"
      | "subscriptionFactory"
      | "transferOwnership"
      | "underwriters"
      | "underwritingFee"
      | "updateFees"
      | "userCreditLines"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimPaid"
      | "CreditLineGranted"
      | "OwnershipTransferred"
      | "Paused"
      | "RepaymentReceived"
      | "RewardsDistributed"
      | "StakeAdded"
      | "StakeRemoved"
      | "Unpaused"
      | "UtilizationRateUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_UTILIZATION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeSubscription",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedSubscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderwriterInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderwritingCapacity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDebt",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCreditLine",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payClaim",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "processedClaims",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromUser",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolMaxUtilizationRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriters",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underwritingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCreditLines",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UTILIZATION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderwriterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderwritingCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolMaxUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwritingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCreditLines",
    data: BytesLike
  ): Result;
}

export namespace ClaimPaidEvent {
  export type InputTuple = [
    claimId: BytesLike,
    subscription: AddressLike,
    provider: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    claimId: string,
    subscription: string,
    provider: string,
    amount: bigint
  ];
  export interface OutputObject {
    claimId: string;
    subscription: string;
    provider: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditLineGrantedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    underwriter: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    underwriter: string
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    underwriter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaymentReceivedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    underwriter: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    underwriter: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    underwriter: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeAddedEvent {
  export type InputTuple = [
    underwriter: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    utilizationCap: BigNumberish
  ];
  export type OutputTuple = [
    underwriter: string,
    token: string,
    amount: bigint,
    utilizationCap: bigint
  ];
  export interface OutputObject {
    underwriter: string;
    token: string;
    amount: bigint;
    utilizationCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeRemovedEvent {
  export type InputTuple = [
    underwriter: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    underwriter: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    underwriter: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UtilizationRateUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    oldRate: BigNumberish,
    newRate: BigNumberish
  ];
  export type OutputTuple = [token: string, oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    token: string;
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReservePool extends BaseContract {
  connect(runner?: ContractRunner | null): ReservePool;
  waitForDeployment(): Promise<this>;

  interface: ReservePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAX_UTILIZATION_RATE: TypedContractMethod<[], [bigint], "view">;

  addStake: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, utilizationCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizeSubscription: TypedContractMethod<
    [subscription: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  authorizedSubscriptions: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  claimRewards: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPoolInfo: TypedContractMethod<
    [token: AddressLike],
    [ReservePool.PoolInfoStructOutput],
    "view"
  >;

  getPoolStats: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStaked: bigint;
        totalUtilized: bigint;
        utilizationRate: bigint;
        maxUtilizationRate: bigint;
        availableCapacity: bigint;
      }
    ],
    "view"
  >;

  getUnderwriterInfo: TypedContractMethod<
    [token: AddressLike, underwriter: AddressLike],
    [IReservePool.UnderwriterInfoStructOutput],
    "view"
  >;

  getUnderwritingCapacity: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getUserDebt: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  grantCreditLine: TypedContractMethod<
    [user: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  isSubscriptionAuthorized: TypedContractMethod<
    [subscription: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payClaim: TypedContractMethod<
    [
      subscription: AddressLike,
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      claimProof: BytesLike,
      platformSig: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  platformSigner: TypedContractMethod<[], [string], "view">;

  pools: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStaked: bigint;
        totalUtilized: bigint;
        totalRewards: bigint;
        utilizationRate: bigint;
        maxUtilizationRate: bigint;
      }
    ],
    "view"
  >;

  processedClaims: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  removeStake: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayFromUser: TypedContractMethod<
    [
      user: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  setPlatformSigner: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolMaxUtilizationRate: TypedContractMethod<
    [token: AddressLike, maxRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSubscriptionFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  subscriptionFactory: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underwriters: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        stakeAmount: bigint;
        utilizationCap: bigint;
        currentUtilization: bigint;
        active: boolean;
        rewardAccumulated: bigint;
      }
    ],
    "view"
  >;

  underwritingFee: TypedContractMethod<[], [bigint], "view">;

  updateFees: TypedContractMethod<
    [_underwritingFee: BigNumberish, _platformFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userCreditLines: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_UTILIZATION_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addStake"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, utilizationCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeSubscription"
  ): TypedContractMethod<
    [subscription: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedSubscriptions"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [ReservePool.PoolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStaked: bigint;
        totalUtilized: bigint;
        utilizationRate: bigint;
        maxUtilizationRate: bigint;
        availableCapacity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderwriterInfo"
  ): TypedContractMethod<
    [token: AddressLike, underwriter: AddressLike],
    [IReservePool.UnderwriterInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderwritingCapacity"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserDebt"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantCreditLine"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSubscriptionAuthorized"
  ): TypedContractMethod<[subscription: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payClaim"
  ): TypedContractMethod<
    [
      subscription: AddressLike,
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      claimProof: BytesLike,
      platformSig: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStaked: bigint;
        totalUtilized: bigint;
        totalRewards: bigint;
        utilizationRate: bigint;
        maxUtilizationRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processedClaims"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeStake"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayFromUser"
  ): TypedContractMethod<
    [
      user: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolMaxUtilizationRate"
  ): TypedContractMethod<
    [token: AddressLike, maxRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubscriptionFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underwriters"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        stakeAmount: bigint;
        utilizationCap: bigint;
        currentUtilization: bigint;
        active: boolean;
        rewardAccumulated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "underwritingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [_underwritingFee: BigNumberish, _platformFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCreditLines"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ClaimPaid"
  ): TypedContractEvent<
    ClaimPaidEvent.InputTuple,
    ClaimPaidEvent.OutputTuple,
    ClaimPaidEvent.OutputObject
  >;
  getEvent(
    key: "CreditLineGranted"
  ): TypedContractEvent<
    CreditLineGrantedEvent.InputTuple,
    CreditLineGrantedEvent.OutputTuple,
    CreditLineGrantedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RepaymentReceived"
  ): TypedContractEvent<
    RepaymentReceivedEvent.InputTuple,
    RepaymentReceivedEvent.OutputTuple,
    RepaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "StakeAdded"
  ): TypedContractEvent<
    StakeAddedEvent.InputTuple,
    StakeAddedEvent.OutputTuple,
    StakeAddedEvent.OutputObject
  >;
  getEvent(
    key: "StakeRemoved"
  ): TypedContractEvent<
    StakeRemovedEvent.InputTuple,
    StakeRemovedEvent.OutputTuple,
    StakeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UtilizationRateUpdated"
  ): TypedContractEvent<
    UtilizationRateUpdatedEvent.InputTuple,
    UtilizationRateUpdatedEvent.OutputTuple,
    UtilizationRateUpdatedEvent.OutputObject
  >;

  filters: {
    "ClaimPaid(bytes32,address,address,uint256)": TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;
    ClaimPaid: TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;

    "CreditLineGranted(address,address,uint256,address)": TypedContractEvent<
      CreditLineGrantedEvent.InputTuple,
      CreditLineGrantedEvent.OutputTuple,
      CreditLineGrantedEvent.OutputObject
    >;
    CreditLineGranted: TypedContractEvent<
      CreditLineGrantedEvent.InputTuple,
      CreditLineGrantedEvent.OutputTuple,
      CreditLineGrantedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RepaymentReceived(address,address,uint256,uint256)": TypedContractEvent<
      RepaymentReceivedEvent.InputTuple,
      RepaymentReceivedEvent.OutputTuple,
      RepaymentReceivedEvent.OutputObject
    >;
    RepaymentReceived: TypedContractEvent<
      RepaymentReceivedEvent.InputTuple,
      RepaymentReceivedEvent.OutputTuple,
      RepaymentReceivedEvent.OutputObject
    >;

    "RewardsDistributed(address,address,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "StakeAdded(address,address,uint256,uint256)": TypedContractEvent<
      StakeAddedEvent.InputTuple,
      StakeAddedEvent.OutputTuple,
      StakeAddedEvent.OutputObject
    >;
    StakeAdded: TypedContractEvent<
      StakeAddedEvent.InputTuple,
      StakeAddedEvent.OutputTuple,
      StakeAddedEvent.OutputObject
    >;

    "StakeRemoved(address,address,uint256)": TypedContractEvent<
      StakeRemovedEvent.InputTuple,
      StakeRemovedEvent.OutputTuple,
      StakeRemovedEvent.OutputObject
    >;
    StakeRemoved: TypedContractEvent<
      StakeRemovedEvent.InputTuple,
      StakeRemovedEvent.OutputTuple,
      StakeRemovedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UtilizationRateUpdated(address,uint256,uint256)": TypedContractEvent<
      UtilizationRateUpdatedEvent.InputTuple,
      UtilizationRateUpdatedEvent.OutputTuple,
      UtilizationRateUpdatedEvent.OutputObject
    >;
    UtilizationRateUpdated: TypedContractEvent<
      UtilizationRateUpdatedEvent.InputTuple,
      UtilizationRateUpdatedEvent.OutputTuple,
      UtilizationRateUpdatedEvent.OutputObject
    >;
  };
}
