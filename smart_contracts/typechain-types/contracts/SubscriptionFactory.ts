/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ISubscriptionFactory {
  export type PaymentAgreementStruct = {
    agreementId: BytesLike;
    user: AddressLike;
    provider: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    period: BigNumberish;
    startDate: BigNumberish;
    gracePeriod: BigNumberish;
    maxCover: BigNumberish;
    nonce: BigNumberish;
  };

  export type PaymentAgreementStructOutput = [
    agreementId: string,
    user: string,
    provider: string,
    token: string,
    amount: bigint,
    period: bigint,
    startDate: bigint,
    gracePeriod: bigint,
    maxCover: bigint,
    nonce: bigint
  ] & {
    agreementId: string;
    user: string;
    provider: string;
    token: string;
    amount: bigint;
    period: bigint;
    startDate: bigint;
    gracePeriod: bigint;
    maxCover: bigint;
    nonce: bigint;
  };
}

export interface SubscriptionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AGREEMENT_TYPEHASH"
      | "createSubscription"
      | "createUserAgent"
      | "eip712Domain"
      | "getImplementationAddresses"
      | "getSubscription"
      | "getUserAgent"
      | "getUserSubscriptions"
      | "owner"
      | "paymentPointNFT"
      | "platformSigner"
      | "renounceOwnership"
      | "reservePool"
      | "subscriptionImplementation"
      | "subscriptions"
      | "transferOwnership"
      | "updatePaymentPointNFT"
      | "updatePlatformSigner"
      | "updateReservePool"
      | "userAgentImplementation"
      | "userAgents"
      | "userSubscriptions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "SubscriptionCreated"
      | "UserAgentCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AGREEMENT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [ISubscriptionFactory.PaymentAgreementStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementationAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentPointNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentPointNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReservePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAgentImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSubscriptions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AGREEMENT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentPointNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentPointNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAgentImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userSubscriptions",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    agreementId: BytesLike,
    user: AddressLike,
    provider: AddressLike,
    subscription: AddressLike,
    userAgent: AddressLike
  ];
  export type OutputTuple = [
    agreementId: string,
    user: string,
    provider: string,
    subscription: string,
    userAgent: string
  ];
  export interface OutputObject {
    agreementId: string;
    user: string;
    provider: string;
    subscription: string;
    userAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAgentCreatedEvent {
  export type InputTuple = [user: AddressLike, userAgent: AddressLike];
  export type OutputTuple = [user: string, userAgent: string];
  export interface OutputObject {
    user: string;
    userAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionFactory;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AGREEMENT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  createSubscription: TypedContractMethod<
    [
      agreement: ISubscriptionFactory.PaymentAgreementStruct,
      providerSig: BytesLike,
      userSig: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createUserAgent: TypedContractMethod<
    [user: AddressLike],
    [string],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getImplementationAddresses: TypedContractMethod<
    [],
    [[string, string]],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [agreementId: BytesLike],
    [string],
    "view"
  >;

  getUserAgent: TypedContractMethod<[user: AddressLike], [string], "view">;

  getUserSubscriptions: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paymentPointNFT: TypedContractMethod<[], [string], "view">;

  platformSigner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reservePool: TypedContractMethod<[], [string], "view">;

  subscriptionImplementation: TypedContractMethod<[], [string], "view">;

  subscriptions: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePaymentPointNFT: TypedContractMethod<
    [newNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformSigner: TypedContractMethod<
    [newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReservePool: TypedContractMethod<
    [newPool: AddressLike],
    [void],
    "nonpayable"
  >;

  userAgentImplementation: TypedContractMethod<[], [string], "view">;

  userAgents: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userSubscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AGREEMENT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [
      agreement: ISubscriptionFactory.PaymentAgreementStruct,
      providerSig: BytesLike,
      userSig: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserAgent"
  ): TypedContractMethod<[user: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getImplementationAddresses"
  ): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<[agreementId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserAgent"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserSubscriptions"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentPointNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reservePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptionImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePaymentPointNFT"
  ): TypedContractMethod<[newNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformSigner"
  ): TypedContractMethod<[newSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReservePool"
  ): TypedContractMethod<[newPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAgentImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userAgents"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userSubscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "UserAgentCreated"
  ): TypedContractEvent<
    UserAgentCreatedEvent.InputTuple,
    UserAgentCreatedEvent.OutputTuple,
    UserAgentCreatedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SubscriptionCreated(bytes32,address,address,address,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "UserAgentCreated(address,address)": TypedContractEvent<
      UserAgentCreatedEvent.InputTuple,
      UserAgentCreatedEvent.OutputTuple,
      UserAgentCreatedEvent.OutputObject
    >;
    UserAgentCreated: TypedContractEvent<
      UserAgentCreatedEvent.InputTuple,
      UserAgentCreatedEvent.OutputTuple,
      UserAgentCreatedEvent.OutputObject
    >;
  };
}
