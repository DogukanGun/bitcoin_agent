/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SubscriptionContract {
  export type PaymentRecordStruct = {
    dueDate: BigNumberish;
    paidDate: BigNumberish;
    amount: BigNumberish;
    fromPool: boolean;
    payer: AddressLike;
    nftTokenId: BigNumberish;
  };

  export type PaymentRecordStructOutput = [
    dueDate: bigint,
    paidDate: bigint,
    amount: bigint,
    fromPool: boolean,
    payer: string,
    nftTokenId: bigint
  ] & {
    dueDate: bigint;
    paidDate: bigint;
    amount: bigint;
    fromPool: boolean;
    payer: string;
    nftTokenId: bigint;
  };

  export type SubscriptionTermsStruct = {
    agreementId: BytesLike;
    user: AddressLike;
    userAgent: AddressLike;
    provider: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    period: BigNumberish;
    startDate: BigNumberish;
    gracePeriod: BigNumberish;
    maxCover: BigNumberish;
  };

  export type SubscriptionTermsStructOutput = [
    agreementId: string,
    user: string,
    userAgent: string,
    provider: string,
    token: string,
    amount: bigint,
    period: bigint,
    startDate: bigint,
    gracePeriod: bigint,
    maxCover: bigint
  ] & {
    agreementId: string;
    user: string;
    userAgent: string;
    provider: string;
    token: string;
    amount: bigint;
    period: bigint;
    startDate: bigint;
    gracePeriod: bigint;
    maxCover: bigint;
  };
}

export interface SubscriptionContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CANCEL_TYPEHASH"
      | "CLAIM_TYPEHASH"
      | "canClaimFromPool"
      | "cancelByUser"
      | "claimFromPool"
      | "currentPeriod"
      | "eip712Domain"
      | "emergencyCancel"
      | "getDebtStatus"
      | "getPaymentHistory"
      | "getPaymentInfo"
      | "getSubscriptionInfo"
      | "initialize"
      | "isInGracePeriod"
      | "isPaymentDue"
      | "nextPaymentDue"
      | "pause"
      | "pay"
      | "paymentPointNFT"
      | "payments"
      | "raiseDispute"
      | "repayFromUser"
      | "reservePool"
      | "resume"
      | "status"
      | "terms"
      | "totalFromPool"
      | "totalPaid"
      | "usedClaims"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimProcessed"
      | "DisputeRaised"
      | "EIP712DomainChanged"
      | "Initialized"
      | "PaymentMade"
      | "RepaymentMade"
      | "StatusChanged"
      | "SubscriptionCancelled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CANCEL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimFromPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelByUser",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromPool",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      SubscriptionContract.SubscriptionTermsStruct,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentDue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPaymentDue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentPointNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromUser",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "terms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFromPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPaid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedClaims",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CANCEL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPaymentDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentPointNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedClaims", data: BytesLike): Result;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    claimId: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    claimId: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    period: BigNumberish,
    disputer: AddressLike,
    reason: string
  ];
  export type OutputTuple = [period: bigint, disputer: string, reason: string];
  export interface OutputObject {
    period: bigint;
    disputer: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentMadeEvent {
  export type InputTuple = [
    period: BigNumberish,
    amount: BigNumberish,
    payer: AddressLike,
    fromPool: boolean,
    nftTokenId: BigNumberish
  ];
  export type OutputTuple = [
    period: bigint,
    amount: bigint,
    payer: string,
    fromPool: boolean,
    nftTokenId: bigint
  ];
  export interface OutputObject {
    period: bigint;
    amount: bigint;
    payer: string;
    fromPool: boolean;
    nftTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaymentMadeEvent {
  export type InputTuple = [
    amount: BigNumberish,
    fee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [amount: bigint, fee: bigint, timestamp: bigint];
  export interface OutputObject {
    amount: bigint;
    fee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusChangedEvent {
  export type InputTuple = [oldStatus: BigNumberish, newStatus: BigNumberish];
  export type OutputTuple = [oldStatus: bigint, newStatus: bigint];
  export interface OutputObject {
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [canceller: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [canceller: string, timestamp: bigint];
  export interface OutputObject {
    canceller: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionContract extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionContract;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CANCEL_TYPEHASH: TypedContractMethod<[], [string], "view">;

  CLAIM_TYPEHASH: TypedContractMethod<[], [string], "view">;

  canClaimFromPool: TypedContractMethod<[], [boolean], "view">;

  cancelByUser: TypedContractMethod<
    [signature: BytesLike, nonce: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimFromPool: TypedContractMethod<
    [claimId: BytesLike, claimProof: BytesLike, platformSig: BytesLike],
    [void],
    "nonpayable"
  >;

  currentPeriod: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  emergencyCancel: TypedContractMethod<[], [void], "nonpayable">;

  getDebtStatus: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        poolDebt: bigint;
        nextDue: bigint;
        overdue: boolean;
      }
    ],
    "view"
  >;

  getPaymentHistory: TypedContractMethod<
    [],
    [SubscriptionContract.PaymentRecordStructOutput[]],
    "view"
  >;

  getPaymentInfo: TypedContractMethod<
    [period: BigNumberish],
    [SubscriptionContract.PaymentRecordStructOutput],
    "view"
  >;

  getSubscriptionInfo: TypedContractMethod<
    [],
    [
      [
        SubscriptionContract.SubscriptionTermsStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ]
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _terms: SubscriptionContract.SubscriptionTermsStruct,
      _reservePool: AddressLike,
      _paymentPointNFT: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isInGracePeriod: TypedContractMethod<[], [boolean], "view">;

  isPaymentDue: TypedContractMethod<[], [boolean], "view">;

  nextPaymentDue: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  pay: TypedContractMethod<[], [void], "nonpayable">;

  paymentPointNFT: TypedContractMethod<[], [string], "view">;

  payments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, string, bigint] & {
        dueDate: bigint;
        paidDate: bigint;
        amount: bigint;
        fromPool: boolean;
        payer: string;
        nftTokenId: bigint;
      }
    ],
    "view"
  >;

  raiseDispute: TypedContractMethod<
    [period: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  repayFromUser: TypedContractMethod<
    [amount: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  reservePool: TypedContractMethod<[], [string], "view">;

  resume: TypedContractMethod<[], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  terms: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        agreementId: string;
        user: string;
        userAgent: string;
        provider: string;
        token: string;
        amount: bigint;
        period: bigint;
        startDate: bigint;
        gracePeriod: bigint;
        maxCover: bigint;
      }
    ],
    "view"
  >;

  totalFromPool: TypedContractMethod<[], [bigint], "view">;

  totalPaid: TypedContractMethod<[], [bigint], "view">;

  usedClaims: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CANCEL_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLAIM_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canClaimFromPool"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelByUser"
  ): TypedContractMethod<
    [signature: BytesLike, nonce: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromPool"
  ): TypedContractMethod<
    [claimId: BytesLike, claimProof: BytesLike, platformSig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyCancel"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDebtStatus"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        poolDebt: bigint;
        nextDue: bigint;
        overdue: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentHistory"
  ): TypedContractMethod<
    [],
    [SubscriptionContract.PaymentRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentInfo"
  ): TypedContractMethod<
    [period: BigNumberish],
    [SubscriptionContract.PaymentRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionInfo"
  ): TypedContractMethod<
    [],
    [
      [
        SubscriptionContract.SubscriptionTermsStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _terms: SubscriptionContract.SubscriptionTermsStruct,
      _reservePool: AddressLike,
      _paymentPointNFT: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInGracePeriod"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaymentDue"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextPaymentDue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paymentPointNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, string, bigint] & {
        dueDate: bigint;
        paidDate: bigint;
        amount: bigint;
        fromPool: boolean;
        payer: string;
        nftTokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [period: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayFromUser"
  ): TypedContractMethod<
    [amount: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reservePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resume"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "terms"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        agreementId: string;
        user: string;
        userAgent: string;
        provider: string;
        token: string;
        amount: bigint;
        period: bigint;
        startDate: bigint;
        gracePeriod: bigint;
        maxCover: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalFromPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedClaims"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentMade"
  ): TypedContractEvent<
    PaymentMadeEvent.InputTuple,
    PaymentMadeEvent.OutputTuple,
    PaymentMadeEvent.OutputObject
  >;
  getEvent(
    key: "RepaymentMade"
  ): TypedContractEvent<
    RepaymentMadeEvent.InputTuple,
    RepaymentMadeEvent.OutputTuple,
    RepaymentMadeEvent.OutputObject
  >;
  getEvent(
    key: "StatusChanged"
  ): TypedContractEvent<
    StatusChangedEvent.InputTuple,
    StatusChangedEvent.OutputTuple,
    StatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;

  filters: {
    "ClaimProcessed(bytes32,uint256,uint256)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "DisputeRaised(uint256,address,string)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PaymentMade(uint256,uint256,address,bool,uint256)": TypedContractEvent<
      PaymentMadeEvent.InputTuple,
      PaymentMadeEvent.OutputTuple,
      PaymentMadeEvent.OutputObject
    >;
    PaymentMade: TypedContractEvent<
      PaymentMadeEvent.InputTuple,
      PaymentMadeEvent.OutputTuple,
      PaymentMadeEvent.OutputObject
    >;

    "RepaymentMade(uint256,uint256,uint256)": TypedContractEvent<
      RepaymentMadeEvent.InputTuple,
      RepaymentMadeEvent.OutputTuple,
      RepaymentMadeEvent.OutputObject
    >;
    RepaymentMade: TypedContractEvent<
      RepaymentMadeEvent.InputTuple,
      RepaymentMadeEvent.OutputTuple,
      RepaymentMadeEvent.OutputObject
    >;

    "StatusChanged(uint8,uint8)": TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;
    StatusChanged: TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;

    "SubscriptionCancelled(address,uint256)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
  };
}
