/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UserAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentNonces"
      | "authorizeAgent"
      | "authorizedAgents"
      | "batchAuthorizeAgents"
      | "eip712Domain"
      | "emergencyRevoke"
      | "executeAgentAction"
      | "getAgentNonce"
      | "initialize"
      | "isAuthorizedAgent"
      | "isValidSignature"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "validateAgentSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentActionExecuted"
      | "AgentAuthorized"
      | "EIP712DomainChanged"
      | "Initialized"
      | "OwnershipTransferred"
      | "SignatureValidated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentNonces",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAgent",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAuthorizeAgents",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRevoke",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgentAction",
    values: [BytesLike, BigNumberish, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAgentSignature",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agentNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAuthorizeAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRevoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgentAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAgentSignature",
    data: BytesLike
  ): Result;
}

export namespace AgentActionExecutedEvent {
  export type InputTuple = [
    agent: AddressLike,
    target: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [agent: string, target: string, success: boolean];
  export interface OutputObject {
    agent: string;
    target: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentAuthorizedEvent {
  export type InputTuple = [agent: AddressLike, authorized: boolean];
  export type OutputTuple = [agent: string, authorized: boolean];
  export interface OutputObject {
    agent: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureValidatedEvent {
  export type InputTuple = [hash: BytesLike, signer: AddressLike];
  export type OutputTuple = [hash: string, signer: string];
  export interface OutputObject {
    hash: string;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserAgent extends BaseContract {
  connect(runner?: ContractRunner | null): UserAgent;
  waitForDeployment(): Promise<this>;

  interface: UserAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  authorizeAgent: TypedContractMethod<
    [agent: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  authorizedAgents: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchAuthorizeAgents: TypedContractMethod<
    [agents: AddressLike[], authorized: boolean[]],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  emergencyRevoke: TypedContractMethod<
    [agent: AddressLike],
    [void],
    "nonpayable"
  >;

  executeAgentAction: TypedContractMethod<
    [
      structHash: BytesLike,
      nonce: BigNumberish,
      signature: BytesLike,
      target: AddressLike,
      data: BytesLike
    ],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  getAgentNonce: TypedContractMethod<[agent: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _name: string, _version: string],
    [void],
    "nonpayable"
  >;

  isAuthorizedAgent: TypedContractMethod<
    [agent: AddressLike],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validateAgentSignature: TypedContractMethod<
    [
      structHash: BytesLike,
      expectedAgent: AddressLike,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizeAgent"
  ): TypedContractMethod<
    [agent: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedAgents"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchAuthorizeAgents"
  ): TypedContractMethod<
    [agents: AddressLike[], authorized: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyRevoke"
  ): TypedContractMethod<[agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAgentAction"
  ): TypedContractMethod<
    [
      structHash: BytesLike,
      nonce: BigNumberish,
      signature: BytesLike,
      target: AddressLike,
      data: BytesLike
    ],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgentNonce"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _name: string, _version: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedAgent"
  ): TypedContractMethod<[agent: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateAgentSignature"
  ): TypedContractMethod<
    [
      structHash: BytesLike,
      expectedAgent: AddressLike,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AgentActionExecuted"
  ): TypedContractEvent<
    AgentActionExecutedEvent.InputTuple,
    AgentActionExecutedEvent.OutputTuple,
    AgentActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AgentAuthorized"
  ): TypedContractEvent<
    AgentAuthorizedEvent.InputTuple,
    AgentAuthorizedEvent.OutputTuple,
    AgentAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SignatureValidated"
  ): TypedContractEvent<
    SignatureValidatedEvent.InputTuple,
    SignatureValidatedEvent.OutputTuple,
    SignatureValidatedEvent.OutputObject
  >;

  filters: {
    "AgentActionExecuted(address,address,bool)": TypedContractEvent<
      AgentActionExecutedEvent.InputTuple,
      AgentActionExecutedEvent.OutputTuple,
      AgentActionExecutedEvent.OutputObject
    >;
    AgentActionExecuted: TypedContractEvent<
      AgentActionExecutedEvent.InputTuple,
      AgentActionExecutedEvent.OutputTuple,
      AgentActionExecutedEvent.OutputObject
    >;

    "AgentAuthorized(address,bool)": TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;
    AgentAuthorized: TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SignatureValidated(bytes32,address)": TypedContractEvent<
      SignatureValidatedEvent.InputTuple,
      SignatureValidatedEvent.OutputTuple,
      SignatureValidatedEvent.OutputObject
    >;
    SignatureValidated: TypedContractEvent<
      SignatureValidatedEvent.InputTuple,
      SignatureValidatedEvent.OutputTuple,
      SignatureValidatedEvent.OutputObject
    >;
  };
}
