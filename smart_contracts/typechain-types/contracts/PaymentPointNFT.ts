/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IPaymentPointNFT {
  export type PaymentPointStruct = {
    user: AddressLike;
    subscription: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    score: BigNumberish;
    metadata: string;
    soulbound: boolean;
  };

  export type PaymentPointStructOutput = [
    user: string,
    subscription: string,
    amount: bigint,
    timestamp: bigint,
    score: bigint,
    metadata: string,
    soulbound: boolean
  ] & {
    user: string;
    subscription: string;
    amount: bigint;
    timestamp: bigint;
    score: bigint;
    metadata: string;
    soulbound: boolean;
  };
}

export interface PaymentPointNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "authorizeMinter"
      | "authorizedMinters"
      | "balanceOf"
      | "baseScore"
      | "bonusMultiplier"
      | "burnExpiredPoints"
      | "getApproved"
      | "getCreditScore"
      | "getPaymentPoint"
      | "getUserPaymentHistory"
      | "getUserPoints"
      | "getUserScore"
      | "isApprovedForAll"
      | "maxConsecutiveBonus"
      | "mintPaymentPoint"
      | "name"
      | "owner"
      | "ownerOf"
      | "paymentPoints"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setSubscriptionFactory"
      | "subscriptionFactory"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateScoreParameters"
      | "userPoints"
      | "userScores"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "MinterAuthorized"
      | "OwnershipTransferred"
      | "PaymentPointMinted"
      | "ScoreUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeMinter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedMinters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseScore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnExpiredPoints",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPaymentHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxConsecutiveBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPaymentPoint",
    values: [AddressLike, AddressLike, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScoreParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userScores",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnExpiredPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPaymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxConsecutiveBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPaymentPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScoreParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userScores", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAuthorizedEvent {
  export type InputTuple = [minter: AddressLike, authorized: boolean];
  export type OutputTuple = [minter: string, authorized: boolean];
  export interface OutputObject {
    minter: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentPointMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    subscription: AddressLike,
    score: BigNumberish,
    soulbound: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    user: string,
    subscription: string,
    score: bigint,
    soulbound: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    subscription: string;
    score: bigint;
    soulbound: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldScore: BigNumberish,
    newScore: BigNumberish
  ];
  export type OutputTuple = [user: string, oldScore: bigint, newScore: bigint];
  export interface OutputObject {
    user: string;
    oldScore: bigint;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentPointNFT extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentPointNFT;
  waitForDeployment(): Promise<this>;

  interface: PaymentPointNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizeMinter: TypedContractMethod<
    [minter: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  authorizedMinters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseScore: TypedContractMethod<[], [bigint], "view">;

  bonusMultiplier: TypedContractMethod<[], [bigint], "view">;

  burnExpiredPoints: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCreditScore: TypedContractMethod<
    [user: AddressLike],
    [[bigint, string] & { score: bigint; rating: string }],
    "view"
  >;

  getPaymentPoint: TypedContractMethod<
    [tokenId: BigNumberish],
    [IPaymentPointNFT.PaymentPointStructOutput],
    "view"
  >;

  getUserPaymentHistory: TypedContractMethod<
    [user: AddressLike],
    [IPaymentPointNFT.PaymentPointStructOutput[]],
    "view"
  >;

  getUserPoints: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  maxConsecutiveBonus: TypedContractMethod<[], [bigint], "view">;

  mintPaymentPoint: TypedContractMethod<
    [
      user: AddressLike,
      subscription: AddressLike,
      amount: BigNumberish,
      metadata: string,
      soulbound: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  paymentPoints: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        user: string;
        subscription: string;
        amount: bigint;
        timestamp: bigint;
        score: bigint;
        metadata: string;
        soulbound: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setSubscriptionFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  subscriptionFactory: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateScoreParameters: TypedContractMethod<
    [
      _baseScore: BigNumberish,
      _bonusMultiplier: BigNumberish,
      _maxConsecutiveBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userPoints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userScores: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeMinter"
  ): TypedContractMethod<
    [minter: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedMinters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bonusMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnExpiredPoints"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCreditScore"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, string] & { score: bigint; rating: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentPoint"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [IPaymentPointNFT.PaymentPointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPaymentHistory"
  ): TypedContractMethod<
    [user: AddressLike],
    [IPaymentPointNFT.PaymentPointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxConsecutiveBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintPaymentPoint"
  ): TypedContractMethod<
    [
      user: AddressLike,
      subscription: AddressLike,
      amount: BigNumberish,
      metadata: string,
      soulbound: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "paymentPoints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        user: string;
        subscription: string;
        amount: bigint;
        timestamp: bigint;
        score: bigint;
        metadata: string;
        soulbound: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubscriptionFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateScoreParameters"
  ): TypedContractMethod<
    [
      _baseScore: BigNumberish,
      _bonusMultiplier: BigNumberish,
      _maxConsecutiveBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPoints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "MinterAuthorized"
  ): TypedContractEvent<
    MinterAuthorizedEvent.InputTuple,
    MinterAuthorizedEvent.OutputTuple,
    MinterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentPointMinted"
  ): TypedContractEvent<
    PaymentPointMintedEvent.InputTuple,
    PaymentPointMintedEvent.OutputTuple,
    PaymentPointMintedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "MinterAuthorized(address,bool)": TypedContractEvent<
      MinterAuthorizedEvent.InputTuple,
      MinterAuthorizedEvent.OutputTuple,
      MinterAuthorizedEvent.OutputObject
    >;
    MinterAuthorized: TypedContractEvent<
      MinterAuthorizedEvent.InputTuple,
      MinterAuthorizedEvent.OutputTuple,
      MinterAuthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentPointMinted(uint256,address,address,uint256,bool)": TypedContractEvent<
      PaymentPointMintedEvent.InputTuple,
      PaymentPointMintedEvent.OutputTuple,
      PaymentPointMintedEvent.OutputObject
    >;
    PaymentPointMinted: TypedContractEvent<
      PaymentPointMintedEvent.InputTuple,
      PaymentPointMintedEvent.OutputTuple,
      PaymentPointMintedEvent.OutputObject
    >;

    "ScoreUpdated(address,uint256,uint256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
